UVOD
Do tohoto deníku budu zapisovat své myšlenky a postupy při plnění úkolu. Primární záměr tohoto deníku je ukázat způsob, jak nad danou problematikou přemýšlím a zároveň slouží jako důkaz, že nepoužívám umělou inteligenci, která by mi se správným promptem dokázala celý úkol vygenerovat. 

Tento deník bude nejspíš rozdělen na 3 části. První částí je tento "úvod", druhá část bude analýza zadání a definice funkcionalit, které bych chtěl zakomponovat. Třetí částí bude checklist, který vytvořím ze zadání a další část budou moje poznámky, které budou odděleny prázdným řádkem a vždy budou začínat časem, ve který jsem začal poznámku psát (např 10:24 11.03.2025).

ANALYZA
Po analýze zadání zjišťuji, že jde o celkem jednoduchou appku, takže bych se pustil i do dobrovolných úkolů. Jediné, s čím jsem ještě neměl zkušenost je stránkování, ale s tím by neměl být vůbec problém. Teď provedu dekompozici zadání na dílčí kroky, které budu postupně splňovat a jejich spojením dosáhnu finálního řešení. I když zadání nezmiňuje zobrazení údajů účtu, rád bych je přidal pro lepší user experience. Zároveň bych chtěl, aby bylo možné vyhledat uživatelů více a ukládat data třeba do localStorage. Tím pádem by bylo možné si údaje zobrazit i při výpadku interentu. Data by se synchronizovala při navázání spojení, a nebo při refreshnutí stránky. Ale když nad tím tak přemýšlím, tak v případě nestabilního připojení by mohlo docházet k hodně requestům, i se tyto údaje nebudou moc měnit. To by ale nemuselo ovlivnit response time, pokud by github cachoval responses. Ale v tom případě zase nemusí být data vždy aktuální.... Nejspíše to vypadá, že ke cachování dochází, protože první request trval 417.65 ms a následný pouze 37.46 ms. Také by to chtělo dát uživateli vhodně vědět, že bylo připojení ztraceno a tím pádem nemusí pracovat s aktuálními daty. Stejně bych mu dal vědět při navázání spojení a o refreshi. (13:25 11.03.2025) Teď jsem se kamarádovi svěřil s nápady, které bych implementoval nad rámec zadání, jako např. multijazyčnost, nasazení do dockeru, 
.... tak jsme došli k závěru, že by to mohlo působit i negativně. Takže se budu držet zadání a nad rámec přidám pouze tu funkcionalitu, kterou považuji za relevantní a nezbytnou pro kladnou user experience. Každopádně nejdřív nejspíše začnu funkcionalitou, kterou následně napojím na UI. Jelikož se jedná pouze o frontend, není potřeba práce s databází, tak nebudu vytvářet žádné diagramy jako např. class diagram a erd. UI bude taky jednoduché, takže přeskočím vytváření wireframů, moodboardu, komponent a finálního návrhu designu. Určitě ani nesmí chybět testy pro ověření správné funkčnosti. Někdy se praktikuje vývojová metoda, že se začne s testy a funkcionalita se píše tak, aby testy začly procházet. Já na tuto metodu nejsem zvyklý, takže zůstanu u klasického psaní funkcionality a testy přidám až v průběhu.

CHECKLIST
☺ přečtení response z https://api.github.com/users/jirisuster/repos
☺ zobrazení základních informací o uživateli
☺ zobrazení seznamu repozitářů
☺ možnost vyhledat uživatele z textboxu
☺ ošetření uživatelského vstupu
☺ zpracování chyb
☺ stránkování
- ukládání do localStorage
- dát uživateli vědět, když mu vypadne/naskočí připojení k internetu
- refetch při načtení stránky a při navázání připojení k internetu
- ošetřit, aby nedošlo k případné ztrátě dat která máme uložena v localStorage, když někdo smaže repozitář a nebo účet. Dát uživateli najevo, že tato data již nejsou dostupná a zobrazit mu jeho lokální verzi.
- design
- testy

IMPLEMENTACE
13:57 11.03.2025 začnu tím, že si vytvořím nový Vue.js projekt a připravím pinia store, který bude sloužit k práci s API. Funkčnost ověřím vypsáním response.

14:03 11.03.2025 původně jsem zamýšlel přidat Router, ale jelikož jde o takhle malou appku, tak to asi nebude třeba. Ale můžu udělat 2 taby, kdy první bude sloužit pro vyhledání informací uživatele a druhý bude "historie hledání".

14:17 11.03.2025 při setupu projektu jsem zvolil typescript, router, pinia, ESLint a prettier. Projekt vytvořen.

15:54 11.03.2025 při vytváření pinia store jsem si nemohl vzpomenout na správnou syntaxi, tak jsem se inspiroval kódem ze svého projektu SquirrelTrade.

16:10 11.03.2025 vytvořen store pro github api, vypsani response na root path /. Proveden commit

16:22 11.03.2025 přemýšlím, jak vzít info o uživateli (jméno a obrázek) z této response. U každého repa je uvedený owner. Každopádně kdyby byl owner jiný, tak nejspíš nebude toto repo zařazeno do této response, protože se díváme na repa daného uživatele. Při kontrole jsem zjistil, že i u repa které jsem forknul jsem uvedený jako owner, takže tam není napsán původní owner, ale jsem tam správně uveden já. Zkusil jsem to s vice uzivateli s forky a funguje to stejne, takze se budu spoléhat na tyto udaje.

17:22 11.03.2025 nyní jsem řešil problém při mapování response na můj interface. Chybová hláška: "is not assignable to type [Repository]". Měl jsem problém v syntaxi, v User.ts mělo být Repository[] a já tam měl napsáno [Repository]. Pravděpodobně jsem si spletl syntaxi s kotlinem :D. 
zdroj: https://stackoverflow.com/questions/68316394/typescript-tuple-error-target-requires-3-elements-but-source-may-have-fewer

17:40 11.03.2025 při použití v-for jsem narazil na ESlint chybu lements in iteration expect to have 'v-bind:key', kterou jsem vyřešil přidáním :key
zdroj: https://stackoverflow.com/questions/47608379/vue-language-server-elements-in-iteration-expect-to-have-v-bindkey-directiv

17:44 11.03.2025 commit

23:42 11.03.2025 nyni, pridam textbox a button pro vyhledani uzivatele. Pouziji vuetify prvky a grid system. Az bude design pro PC hotov, pouziji cols pro mobilni responzivitu.

0:34 12.03.2025 chvili mi trvalo zjitit, jak udelat, aby v-text-field nevyplnoval celou height. Pak jsem si uvedomil, ze jsem vubec nepouzil v-col...

0:37 12.03.2025 přidána možnost přidat vyhledat uživatele pomocí textboxu. proveden commit

0:44 12.03.2025 teď bych chtěl ošetřit uživatelský vstup. Dát uživateli co nejmenší možnost odeslat nesprávná data a dát mu možnost data upravit před odesláním. Zranitelnosti jako XSS jsou již automaticky řešeny samotným frameworkem, takže nějaké escapování uživatelského vstupu nemusím řešit.
Github usernames mají určitá pravidla:
Délka 1-39 znaků
povoleny pouze znaky a-z, A-Z, 0-9, -
username může pomlčku obsahovat pouze uvnitř a pouze jednou, ne víckrát po sobě.
Zdroj: https://docs.github.com/en/enterprise-cloud@latest/admin/managing-iam/iam-configuration-reference/username-considerations-for-external-authentication
Přesně si nevzpomínám, jak tyto pravidla implementovat, ale pro inspiraci se podívám na svůj projekt JobConnect, kde jsem stejný problém již řešil.

1:07 12.03.2025 uživatelský vstup jsem ošetřil, teď bych zkusil vyvolat modální okno po kliknutí na repo. Proveden commit

1:30 12.03.2025 vytvořeno základní modální okno pomocí v-dialog. Proveden commit
zdroj: https://vuetifyjs.com/en/components/dialogs/

2:15 12.03.2025 Nemohl jsem zjistit, proč se neskočí do správné větve při kontrole instance custom erroru. Nakonec jsem zjistil, že místo .then() musím použít async.

2:20 12.03.2025 Během testování error handlingu mě github rate limitnul :D (API rate limit exceeded for XX.XXX.XXX.XXX. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)). Nadešel čas nahodit VPN. 

2:33 12.03.2025 Error handling je více méně hotov, akorát jsem si všimnul, že nevaliduji u uživatele, jestli nezadal jiné znaky, než povolené. A zároveň na tlačítko jde kliknout i když kritéria nejsou splněna.

3:36 12.03.2025 chyby a validace vstupu by měly být plně ošetřeny. Proveden commit.

3:56 12.03.2025 na stránkování použiji npm package vue-awesome-paginate, která vypadá celkem slušně a je nejméně zastaralá. Dalším bonusem je, že nemá další dependencies a je lightweight.
zdroj: https://www.npmjs.com/package/vue-awesome-paginate

4:52 12.03.2025 plně funkční stránkování. Proveden commit

